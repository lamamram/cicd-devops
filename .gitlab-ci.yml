image: maven:3.9.9-eclipse-temurin-17-alpine
variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  TRIGGER_CACHE: "off"

stages:
  - cache
  - tests
  - quality
  - interfaces

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

# structure transparente du point de vue du pipeline
.cache: &cache
    key: m2
    policy: pull
    untracked: true


generate_cache:
  stage: cache
  tags:
    - formation
  script:
    - mvn compile
  cache:
    # "<<": ancre yaml : accroche le label mais permet des ajouts / modifications
    <<: *cache
    paths:
      - .m2/
    policy: push
    untracked: false
  rules:
     - changes:
         - pom.xml
       when: on_success
     - if: $TRIGGER_CACHE == "on"

# préfixer le job avec "." désactive le job
test:
  stage: tests
  tags:
    - formation
  script:
    ## enlever les tests E2E
    - mvn test -DexcludedGroups=E2E
    - cat target/site/jacoco/index.html
  coverage: /Total.*?([0-9]{1,3})%/
  artifacts:
    paths:
      - target/site/jacoco/jacoco.xml
    access: developer
    expire_in: "1 hour"
    reports:
      junit: target/surefire-reports/TEST-*.xml
      coverage_report:
        path: target/site/jacoco/jacoco.xml
        coverage_format: jacoco
  cache: *cache

.sonar:
  stage: quality
  tags:
    - formation
  script:
    - >
      mvn compile sonar:sonar
      -Dsonar.projectKey=dev
      -Dsonar.host.url=http://gitlab.lan.fr:9000
      -Dsonar.java.binaries=target
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      -Dsonar.qualitygate.wait=true

  cache: *cache


  #### utiliser le mvn package => générer le war
# package:
#   stage: release
#   tags:
#     - formation
#   # variables:
#   #   GIT_SSL_NO_VERIFY: "true"
#   script:
#     - >
#       mvn $MAVEN_CLI_OPTS 
#       -Dmaven.test.skip=true 
#       package
#     - cp sample.war target 
#     - >
#       curl 
#       -k
#       --header "JOB-TOKEN: $CI_JOB_TOKEN" 
#       --upload-file target/sample.war
#       "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/dev/app.war"
#   artifacts:
#     untracked: false
#     access: all
#     expire_in: "1 hour"
#     paths:
#       - "target/app.war"
#   # conditions d'exécution du pipeline
#   # on ajoute une liste des règles:
#   # si une règle est vraie alors le job s'exécute (OU logique)
#   # toutes les clauses d'une règle doivent être vraie pour exécuter (ET logique) 
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
#       when: on_success
#     # si le pipeline est excuté contre un tag != une branche
#     - if: $CI_COMMIT_TAG



###### POST DEPLOY #####

e2e:
  stage: interfaces
  tags:
    - formation
  # conteneur Docker crée à la volée avec un DNS (alias) auto. utilisable par le conteneur maven
  services:
    - name: selenium/standalone-firefox:133.0-geckodriver-0.35
      alias: selenium-server
  before_script:
    # on compresse le driver et on l'installe dans le PATH
    - tar -xvzf geckodriver-v0.35.0-linux64.tar.gz -C /usr/local/bin
    - chmod u+x /usr/local/bin/geckodriver
  script:
    # filtrer les tests selon des tags
    - mvn test -Dgroups=E2E
  cache: *cache
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success
    # si le pipeline est excuté contre un tag != une branche
    - if: $CI_COMMIT_TAG